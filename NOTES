"assets": {
        "red": {
            "href": "https://e84-earth-search-sentinel-data.s3.us-west-2.amazonaws.com/sentinel-2-c1-l2a/38/X/NF/2025/4/S2B_T38XNF_20250422T091553_L2A/B04.tif",
            "type": "image/tiff; application=geotiff; profile=cloud-optimized",
            "title": "Red - 10m",
            "gsd": 10,
            "roles": [
                "data",
                "reflectance"
            ]
        },
        "green": {
            "href": "https://e84-earth-search-sentinel-data.s3.us-west-2.amazonaws.com/sentinel-2-c1-l2a/38/X/NF/2025/4/S2B_T38XNF_20250422T091553_L2A/B03.tif",
            "type": "image/tiff; application=geotiff; profile=cloud-optimized",
            "title": "Green - 10m",
            "gsd": 10,
            "roles": [
                "data",
                "reflectance"
            ]
        },
        "blue": {
            "href": "https://e84-earth-search-sentinel-data.s3.us-west-2.amazonaws.com/sentinel-2-c1-l2a/38/X/NF/2025/4/S2B_T38XNF_20250422T091553_L2A/B02.tif",
            "type": "image/tiff; application=geotiff; profile=cloud-optimized",
            "title": "Blue - 10m",
            "gsd": 10,
            "roles": [
                "data",
                "reflectance"
            ]
        },
        "visual": {
            "href": "https://e84-earth-search-sentinel-data.s3.us-west-2.amazonaws.com/sentinel-2-c1-l2a/38/X/NF/2025/4/S2B_T38XNF_20250422T091553_L2A/TCI.tif",
            "type": "image/tiff; application=geotiff; profile=cloud-optimized",
            "title": "True color image",
            "gsd": 10,
            "roles": [
                "visual"
            ]
        }
    },



> [!TIP]
> Tip!

some text

> [!NOTE]
> Note!

class Accuracy(Enum):
    # | Decimal Places | Degrees      | Distance  |
    # |---------------|--------------|-----------|
    # | 0             | 1.0          | 111 km    |
    # | 1             | 0.1          | 11.1 km   |
    # | 2             | 0.01         | 1.11 km   |
    # | 3             | 0.001        | 111 m     |
    # | 4             | 0.0001       | 11.1 m    |
    # | 5             | 0.00001      | 1.11 m    |
    # | 6             | 0.000001     | 111 mm    |
    # | 7             | 0.0000001    | 11.1 mm   |
    # | 8             | 0.00000001   | 1.11 mm   |

    # in meters
    _0_00111 = 8
    _0_0111 = 7
    _0_111 = 6
    _1_11 = 5
    _11_1 = 4
    _111 = 3
    _1110 = 2
    _11100 = 1
    _111000 = 0

extra fields

from pydantic import BaseModel, ConfigDict, Field, field_serializer, model_validator
from typing import Any, Dict

class ModelWithExtraFields(BaseModel):
    # Regular fields
    id: str
    name: str

    # Dict to store unknown properties
    extra_fields: Dict[str, Any] = Field(default_factory=dict, exclude=True)

    model_config = ConfigDict(
        # Allow extra fields (don't raise error for unknown fields)
        extra="allow"
    )

    @model_validator(mode="after")
    def extract_extra_fields(self, data: Any) -> "ModelWithExtraFields":
        # Move any extra fields to the extra_fields dict
        known_fields = self.model_fields.keys()
        for field_name, value in dict(data).items():
            if field_name not in known_fields:
                self.extra_fields[field_name] = value
        return self

    @field_serializer("extra_fields")
    def serialize_extra_fields(self, extra_fields: Dict[str, Any]) -> None:
        # This prevents extra_fields from being included in serialized output
        # Extra fields are already mixed in with the regular fields
        return None




# class Assets(BaseModel):
#     assets: list[Asset]


#     @model_serializer(mode="wrap", when_used="json")
#     def ser_model(self, nxt: SerializerFunctionWrapHandler, _info: SerializationInfo) -> dict[str, Any]:
#         # todo: exclude name
#         return nxt({asset.name: asset.model_dump() for asset in self.assets})

#     model_config = ConfigDict(extra="forbid", frozen=True, strict=True)

    # @field_validator("assets", mode="before")
    # @classmethod
    # def assets_field_validator(cls, v: dict[AssetName, JSONObject] | list[Asset]) -> list[Asset]:
    #     if isinstance(v, dict):
    #         return [Asset.named(name=k, asset=v) for k, v in v.items()]
    #     return v
